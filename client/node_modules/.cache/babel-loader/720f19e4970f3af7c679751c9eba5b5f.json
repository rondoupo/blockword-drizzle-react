{"ast":null,"code":"var _jsxFileName = \"/Users/rondoupo/Projects/Truffle/drizzle-react-tut/client/src/ReadString.js\";\nimport React from \"react\";\n\nclass ReadString extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      dataKey: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      drizzle\n    } = this.props;\n    const contract = drizzle.contracts.MyStringStore; // ADDED FOR BLOCKWORD\n\n    const {\n      drizzle2\n    } = this.props;\n    const contract2 = drizzle.contracts.BlockWord; // let drizzle know we want to watch the `myString` method\n\n    const dataKey = contract.methods[\"myString\"].cacheCall(); // save the `dataKey` to local component state for later reference\n\n    this.setState({\n      dataKey\n    });\n  }\n\n  render() {\n    // get the contract state from drizzleState\n    const {\n      MyStringStore\n    } = this.props.drizzleState.contracts; // ADDED FOR BLOCKWORD\n\n    const {\n      BlockWord\n    } = this.props.drizzleState.contracts; // using the saved `dataKey`, get the variable we're interested in\n\n    const myString = MyStringStore.myString[this.state.dataKey]; // ADDED FOR BLOCKWORD\n\n    const myString2 = BlockWord.myString2[this.state.dataKey]; // if it exists, then we display its value\n\n    return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, \"My stored string: \", myString && myString.value);\n  }\n\n}\n\nexport default ReadString;","map":{"version":3,"sources":["/Users/rondoupo/Projects/Truffle/drizzle-react-tut/client/src/ReadString.js"],"names":["React","ReadString","Component","state","dataKey","componentDidMount","drizzle","props","contract","contracts","MyStringStore","drizzle2","contract2","BlockWord","methods","cacheCall","setState","render","drizzleState","myString","myString2","value"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,UAAN,SAAyBD,KAAK,CAACE,SAA/B,CAAyC;AAAA;AAAA;AAAA,SACvCC,KADuC,GAC/B;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAD+B;AAAA;;AAGvCC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKC,KAAzB;AACA,UAAMC,QAAQ,GAAGF,OAAO,CAACG,SAAR,CAAkBC,aAAnC,CAFkB,CAGlB;;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAe,KAAKJ,KAA1B;AACA,UAAMK,SAAS,GAAGN,OAAO,CAACG,SAAR,CAAkBI,SAApC,CALkB,CAOlB;;AACA,UAAMT,OAAO,GAAGI,QAAQ,CAACM,OAAT,CAAiB,UAAjB,EAA6BC,SAA7B,EAAhB,CARkB,CAUlB;;AACA,SAAKC,QAAL,CAAc;AAAEZ,MAAAA;AAAF,KAAd;AACD;;AAEDa,EAAAA,MAAM,GAAG;AACP;AACA,UAAM;AAAEP,MAAAA;AAAF,QAAoB,KAAKH,KAAL,CAAWW,YAAX,CAAwBT,SAAlD,CAFO,CAGP;;AACA,UAAM;AAAEI,MAAAA;AAAF,QAAgB,KAAKN,KAAL,CAAWW,YAAX,CAAwBT,SAA9C,CAJO,CAMP;;AACA,UAAMU,QAAQ,GAAGT,aAAa,CAACS,QAAd,CAAuB,KAAKhB,KAAL,CAAWC,OAAlC,CAAjB,CAPO,CAQP;;AACA,UAAMgB,SAAS,GAAGP,SAAS,CAACO,SAAV,CAAoB,KAAKjB,KAAL,CAAWC,OAA/B,CAAlB,CATO,CAYP;;AACA,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAsBe,QAAQ,IAAIA,QAAQ,CAACE,KAA3C,CAAP;AACD;;AA/BsC;;AAkCzC,eAAepB,UAAf","sourcesContent":["import React from \"react\";\n\nclass ReadString extends React.Component {\n  state = { dataKey: null };\n\n  componentDidMount() {\n    const { drizzle } = this.props;\n    const contract = drizzle.contracts.MyStringStore;\n    // ADDED FOR BLOCKWORD\n    const { drizzle2 } = this.props;\n    const contract2 = drizzle.contracts.BlockWord;\n\n    // let drizzle know we want to watch the `myString` method\n    const dataKey = contract.methods[\"myString\"].cacheCall();\n\n    // save the `dataKey` to local component state for later reference\n    this.setState({ dataKey });\n  }\n\n  render() {\n    // get the contract state from drizzleState\n    const { MyStringStore } = this.props.drizzleState.contracts;\n    // ADDED FOR BLOCKWORD\n    const { BlockWord } = this.props.drizzleState.contracts;\n\n    // using the saved `dataKey`, get the variable we're interested in\n    const myString = MyStringStore.myString[this.state.dataKey];\n    // ADDED FOR BLOCKWORD\n    const myString2 = BlockWord.myString2[this.state.dataKey];\n\n\n    // if it exists, then we display its value\n    return <p>My stored string: {myString && myString.value}</p>;\n  }\n}\n\nexport default ReadString;"]},"metadata":{},"sourceType":"module"}